"""
Generated by 'django-admin startproject' using Django 5.1.1.
"""
import os
from pathlib import Path
from split_settings.tools import include

include(
    'components/base.py',
    'components/secrets.py',
    'components/drf_settings.py',
)
DEBUG = True
ALLOWED_HOSTS =['*']
BASE_DIR = Path(__file__).resolve().parent.parent

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
PROMETHEUS_LATENCY_BUCKETS = (0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1.0, 2.5, 5.0, 7.5, 10.0, 25.0, 50.0, 75.0, float("inf"),)
PROMETHEUS_METRIC_NAMESPACE = "exchangerates"

# Logging configuration
LOGGING = {
    'version': 1,  # Always 1 as per standard
    'disable_existing_loggers': False,  # Don't disable Django's default logging
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
        },
        'verbose': {
            'format': '%(asctime)s [%(levelname)s] %(name)s (%(filename)s:%(lineno)d): %(message)s',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',  # Minimum level to log in the console
            'class': 'logging.StreamHandler',  # Outputs to the console
            'formatter': 'standard',  # Use standard formatting for the console
        },
        'file': {
            'level': 'ERROR',  # Logs only errors and critical issues to a file
            'class': 'logging.FileHandler',  # Log to a file
            'filename': os.path.join(BASE_DIR, 'logs', 'django_errors.log'),  # Path to log file
            'formatter': 'verbose',  # More detailed log entries
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],  # Output logs to both console and file
            'level': 'DEBUG',  # Minimum level for this logger
            'propagate': True,  # Propagate logs to parent handlers
        },
        'django.request': {
            'handlers': ['file'],  # Log errors to a file
            'level': 'ERROR',
            'propagate': False,  # Stop the log from propagating to other loggers
        },
    },
}

# Ensure the logs folder exists
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)



# Set HTTP Strict Transport Security (HSTS)
# SECURE_HSTS_SECONDS = 31536000  # 1 year
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True 
# SECURE_HSTS_PRELOAD = True
# SECURE_SSL_REDIRECT = True
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')